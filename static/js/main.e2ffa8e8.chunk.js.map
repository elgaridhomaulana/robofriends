{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","id","name","email","alt","src","CardList","robots","cardComponent","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobot","filter","robot","toLowerCase","includes","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAeeA,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACE,yBAAKC,UAAU,OACb,2BACEA,UAAU,gCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCKLK,EAZF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACtB,OACE,yBAAKP,UAAU,uDACb,yBAAKQ,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,mBACrB,6BACE,4BAAKC,GACL,2BAAIC,MCKCG,EAVE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,GAAIM,EAAOI,GAAGV,GAAIC,KAAMK,EAAOI,GAAGT,KAAMC,MAAOI,EAAOI,GAAGR,WAElF,OACI,6BACKK,ICCEK,EARA,SAACC,GACZ,OACI,yBAAKC,MAAQ,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAC9DJ,EAAMK,WCiBJC,G,kBAnBb,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHG,E,+EAODC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACN,wDAEFG,KAAKX,MAAMK,a,GAhBMQ,cC+CbC,E,YAxCb,aAAe,IAAD,8BACZ,+CAOFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAPxC,EAAKZ,MAAQ,CACXd,OAAO,GACPwB,YAAY,IAJF,E,iFAYO,IAAD,OAClBG,MAAM,8CAA8CC,MAAK,SAAAC,GACvD,OAAOA,EAASC,UACfF,MAAK,SAAAG,GACN,EAAKZ,SAAS,CAACnB,OAAO+B,S,+BAKhB,IAAD,EACuBb,KAAKJ,MAA5Bd,EADA,EACAA,OAAQwB,EADR,EACQA,YACTQ,EAAgBhC,EAAOiC,QAAO,SAAAC,GAClC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASZ,EAAYW,kBAEvD,OACE,yBAAK9C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAc8B,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUtB,OAAQgC,W,GAjCZK,IAAMjB,WCIJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.e2ffa8e8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n      <div className='pa2'>\r\n        <input\r\n          className='pa3 b--green bg-lightest-blue' \r\n          type='search' \r\n          placeholder='Search Robots'\r\n          onChange={searchChange} \r\n        />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({ id, name, email}) => {\r\n    return (\r\n      <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n        <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>  \r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardComponent = robots.map((user, i) => {\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/> \r\n    })\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    )\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style= {{overflowY:'scroll', border:'5px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n        hasError: false\r\n        }\r\n    }\r\n  \r\n  componentDidCatch(error, info) {\r\n    this.setState({hasError: true})\r\n  }\r\n  \r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Something wrong happened</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css'\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots:[],\r\n      searchField:''\r\n    }\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({searchField:event.target.value})\r\n    }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => {\r\n      return response.json();\r\n    }).then(users => {\r\n      this.setState({robots:users})\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    const {robots, searchField} = this.state\r\n    const filteredRobot = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n    return (\r\n      <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredRobot}/>\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}